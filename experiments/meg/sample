import json
import numpy as np
from fadin.utils import utils_meg
import copy
from fadin.solver import FaDIn
import torch

# Load CDL output
with open("experiments/meg/dict_sample.json", "r") as fp:
    dict_cdl = json.load(fp)
sfreq = dict_cdl['dict_other_params']['sfreq']
dict_pair_up = dict_cdl['dict_pair_up']


def fit_fadin_sample(list_tasks, atom, cdl_dict, filter_interval, thresh_acti,
                     kernel, baseline_mask, alpha_mask, **fadin_init):
    """
    Parameters
    ----------
    list_tasks: `Tuple` of lists
        One element of this tuple is a list of driver activations to group
        in the same driver channel.

    atom: `int`
        Coordinate of the atom whose activations will be used for *
        Hawkes process parameterization.

    cdl_dict: `dict` of `dict`
        Output of dictionary learning applied to `sample` dataset,
        with keys as follows:
        'dict_cdl_params' : `dict`
            Value of GreedyCDL's parameters.

        'dict_other_params' : `dict`
            Value of all other parameters, such as data source, sfreq, etc.

        'dict_cdl_fit_res' : `dict` of `numpy.array`
            Results of the cdl.fit(), with u_hat_, v_hat_ and z_hat.

        'dict_pair_up' : `dict`
            Pre-process of results that serve as input in Hawkes process
            fitting algorithm.

    filter_interval: `float` or `None`
        Time interval for block filtering of atom activations:
        in each time window of width `filter_interval`,
        only the timestamp with max activation will be kept.
        If set to `None`, no block filtering is done on atom activations.

    thresh_acti: `float` or `None`
        Threshold applied on atom activations.
        Only timestamps of activations > `thresh_acti` will be kept.

    kernel: `str`
        Name of kernel to use in the FaDIn solver.
        Supported values are `truncated_exponential`, `truncated_gaussian` and
        `raised_cosine`.

    baseline_mask: `Tensor` of shape 3 or `None`
        argument of FaDIn solver.

    alpha_mask: `Tensor` of shape 3,3 or `None`
        argument of FaDIn solver.

    **fadin_init: `dict`
        extra arguments of FaDIn solver.
    """
    # Pro-process CDL output for Hawkes process fitting
    dict_events_acti = cdl_dict['dict_pair_up']
    T = int(dict_events_acti['T']) + 1

    # Driver events
    events_timestamps = copy.deepcopy(dict_events_acti['events_timestamps'])
    events_acti_tt = [utils_meg.proprocess_tasks(tasks, events_timestamps)
                      for tasks in list_tasks]

    # Atom activations
    acti = np.array([copy.deepcopy(dict_events_acti['acti_shift'][atom])])
    if filter_interval is not None:
        acti = utils_meg.filter_activation(acti,
                                           atom_to_filter='all',
                                           sfreq=sfreq,
                                           time_interval=filter_interval)
    if thresh_acti is not None:
        acti = utils_meg.get_atoms_timestamps(acti=acti,
                                              sfreq=sfreq,
                                              threshold=thresh_acti)
    events_acti_tt.append(acti)

    # Fit Hawkes process to data
    solver = FaDIn(n_dim=len(events_acti_tt), kernel=kernel,
                   baseline_mask=baseline_mask, alpha_mask=alpha_mask,
                   **fadin_init)
    solver.fit(events_acti_tt, T)
    # Return results
    params_intens = solver.params_intens
    del solver
    return params_intens


BL_MASK = torch.Tensor([1, 1, 0])
ALPHA_MASK = torch.Tensor([[0, 0, 0], [0, 0, 0], [1, 1, 0]])

##############################################################################
# REPRODUCE SAMPLE RESULTS IN [1]
##############################################################################

tg_atom6_mask = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
                                 atom=6,
                                 cdl_dict=dict_cdl,
                                 filter_interval=0.01,
                                 thresh_acti=0.6e-10,
                                 kernel='truncated_gaussian',
                                 baseline_mask=BL_MASK,
                                 alpha_mask=ALPHA_MASK,
                                 kernel_length=0.5,
                                 delta=0.02,
                                 optim='RMSprop',
                                 params_optim={'lr': 1e-3},
                                 max_iter=10000,
                                 ztzG_approx=False
                                 )
print('Truncated gaussian, atom 6, with mask')
print('Estimated baseline:', tg_atom6_mask[0])
print('Estimated alpha:', tg_atom6_mask[1])
print('Estimated kernel parameters', tg_atom6_mask[2:])

tg_atom3_allmask = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
                                    atom=3,
                                    cdl_dict=dict_cdl,
                                    filter_interval=0.01,
                                    thresh_acti=0.6e-10,
                                    kernel='truncated_gaussian',
                                    baseline_mask=BL_MASK,
                                    alpha_mask=ALPHA_MASK,
                                    kernel_length=0.5,
                                    delta=0.02,
                                    optim='RMSprop',
                                    params_optim={'lr': 1e-3},
                                    max_iter=10000,
                                    ztzG_approx=False
                                    )
print('Truncated gaussian, atom 3, with mask')
print('Estimated baseline:', tg_atom3_allmask[0])
print('Estimated alpha:', tg_atom3_allmask[1])
print('Estimated kernel parameters', tg_atom3_allmask[2:])

rc_atom3_mask = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
                                 atom=3,
                                 cdl_dict=dict_cdl,
                                 filter_interval=0.01,
                                 thresh_acti=0.6e-10,
                                 kernel='raised_cosine',
                                 baseline_mask=BL_MASK,
                                 alpha_mask=ALPHA_MASK,
                                 kernel_length=0.5,
                                 delta=0.02,
                                 optim='RMSprop',
                                 params_optim={'lr': 1e-3},
                                 max_iter=20000,
                                 ztzG_approx=False
                                 )
print('Raised_cosine, atom 3, with mask')
print('Estimated baseline:', rc_atom3_mask[0])
print('Estimated alpha:', 2 * rc_atom3_mask[3] * rc_atom3_mask[1])
print('Estimated kernel parameters u and s', rc_atom3_mask[2:])

rc_atom6_mask = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
                                 atom=6,
                                 cdl_dict=dict_cdl,
                                 filter_interval=0.01,
                                 thresh_acti=0.6e-10,
                                 kernel='raised_cosine',
                                 baseline_mask=BL_MASK,
                                 alpha_mask=ALPHA_MASK,
                                 kernel_length=0.5,
                                 delta=0.02,
                                 optim='RMSprop',
                                 params_optim={'lr': 1e-3},
                                 max_iter=20000,
                                 ztzG_approx=False
                                 )

print('Raised_cosine, atom 6, with mask')
print('Estimated baseline:', rc_atom6_mask[0])
print('Estimated alpha:', 2 * rc_atom6_mask[3] * rc_atom6_mask[1])
print('Estimated kernel parameters u and s', rc_atom6_mask[2:])

##############################################################################
# OTHER EXPERIMENTS WITH TRUNCATED GAUSSIAN KERNELS
##############################################################################

# tg_atom6_nomask = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
#                                    atom=6,
#                                    cdl_dict=dict_cdl,
#                                    filter_interval=0.01,
#                                    thresh_acti=0.6e-10,
#                                    kernel='truncated_gaussian',
#                                    baseline_mask=None,
#                                    alpha_mask=None,
#                                    kernel_length=0.5,
#                                    delta=0.02,
#                                    optim='RMSprop',
#                                    params_optim={'lr': 1e-3},
#                                    max_iter=10000,
#                                    ztzG_approx=False
#                                    )

# tg_atom3_nomask = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
#                                    atom=3,
#                                    cdl_dict=dict_cdl,
#                                    filter_interval=0.01,
#                                    thresh_acti=0.6e-10,
#                                    kernel='truncated_gaussian',
#                                    baseline_mask=None,
#                                    alpha_mask=None,
#                                    kernel_length=0.5,
#                                    delta=0.02,
#                                    optim='RMSprop',
#                                    params_optim={'lr': 1e-3},
#                                    max_iter=10000,
#                                    ztzG_approx=False
#                                    )

# tg_atom3_nofilt_nomask = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
#                                           atom=3,
#                                           cdl_dict=dict_cdl,
#                                           filter_interval=None,
#                                           thresh_acti=None,
#                                           kernel='truncated_gaussian',
#                                           baseline_mask=None,
#                                           alpha_mask=None,
#                                           kernel_length=0.5,
#                                           delta=0.02,
#                                           optim='RMSprop',
#                                           params_optim={'lr': 1e-3},
#                                           max_iter=10000,
#                                           ztzG_approx=False
#                                           )

# tg_atom3_nofilt = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
#                                    atom=3,
#                                    cdl_dict=dict_cdl,
#                                    filter_interval=None,
#                                    thresh_acti=None,
#                                    kernel='truncated_gaussian',
#                                    baseline_mask=BL_MASK,
#                                    alpha_mask=ALPHA_MASK,
#                                    kernel_length=0.5,
#                                    delta=0.02,
#                                    optim='RMSprop',
#                                    params_optim={'lr': 1e-3},
#                                    max_iter=10000,
#                                    ztzG_approx=False
#                                    )

# tg_atom3_nofilt_nomask = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
#                                           atom=6,
#                                           cdl_dict=dict_cdl,
#                                           filter_interval=None,
#                                           thresh_acti=None,
#                                           kernel='truncated_gaussian',
#                                           baseline_mask=None,
#                                           alpha_mask=None,
#                                           kernel_length=0.5,
#                                           delta=0.02,
#                                           optim='RMSprop',
#                                           params_optim={'lr': 1e-3},
#                                           max_iter=10000,
#                                           ztzG_approx=False
#                                           )

# tg_atom6_nofilt = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
#                                    atom=6,
#                                    cdl_dict=dict_cdl,
#                                    filter_interval=None,
#                                    thresh_acti=None,
#                                    kernel='truncated_gaussian',
#                                    baseline_mask=BL_MASK,
#                                    alpha_mask=ALPHA_MASK,
#                                    kernel_length=0.5,
#                                    delta=0.02,
#                                    optim='RMSprop',
#                                    params_optim={'lr': 1e-3},
#                                    max_iter=10000,
#                                    ztzG_approx=False
#                                    )

##############################################################################
# OTHER EXPERIMENTS WITH RAISED_COSINE KERNELS
##############################################################################

# rc_atom3_nomask = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
#                                    atom=3,
#                                    cdl_dict=dict_cdl,
#                                    filter_interval=0.01,
#                                    thresh_acti=0.6e-10,
#                                    kernel='raised_cosine',
#                                    baseline_mask=None,
#                                    alpha_mask=None,
#                                    kernel_length=0.5,
#                                    delta=0.02,
#                                    optim='RMSprop',
#                                    params_optim={'lr': 1e-3},
#                                    max_iter=20000,
#                                    ztzG_approx=False,
#                                    )
# print('Raised_cosine, atom 3, no mask')
# print('Estimated baseline:', rc_atom3_nomask[0])
# print('Estimated alpha:', 2 * rc_atom3_nomask[3] * rc_atom3_nomask[1])
# print('Estimated kernel parameters', rc_atom3_nomask[2:])

# rc_atom6_nomask = fit_fadin_sample(list_tasks=(['1', '2'], ['3', '4']),
#                                    atom=6,
#                                    cdl_dict=dict_cdl,
#                                    filter_interval=0.01,
#                                    thresh_acti=0.6e-10,
#                                    kernel='raised_cosine',
#                                    baseline_mask=None,
#                                    alpha_mask=None,
#                                    kernel_length=0.5,
#                                    delta=0.02,
#                                    optim='RMSprop',
#                                    params_optim={'lr': 1e-3},
#                                    max_iter=20000,
#                                    ztzG_approx=False
#                                    )

# print('Raised_cosine, atom 6, without mask')
# print('Estimated baseline:', rc_atom6_nomask[0])
# print('Estimated alpha:', 2 * rc_atom6_nomask[3] * rc_atom6_nomask[1])
# print('Estimated kernel parameters', rc_atom6_nomask[2:])